def evolve_subcomponent(subcomponent, other_subcomponents, features, targets, mutation_rate):
    """
    Evolve a subcomponent using genetic operators.
    Args:
    subcomponent (np.array): The subcomponent to evolve.
    other_subcomponents (list of np.array): The other subcomponents to form complete individuals.
    features (np.array): The feature matrix of the dataset.
    targets (np.array): The target values of the dataset.
    mutation_rate (float): The probability of mutating each gene.

    Returns:
    np.array: The evolved subcomponent.
    """
    # Initialize new population
    new_population = np.zeros_like(subcomponent)

    # Generate new individuals through crossover and mutation
    for i in range(subcomponent.shape[0]):
        # Select parents using tournament selection
        parent1 = tournament_selection(subcomponent, other_subcomponents, features, targets)
        parent2 = tournament_selection(subcomponent, other_subcomponents, features, targets)

        # Perform crossover to generate offspring
        offspring = uniform_crossover(parent1, parent2)

        # Apply mutation to offspring
        mutated_offspring = mutate(offspring, mutation_rate)

        # Add mutated offspring to new population
        new_population[i] = mutated_offspring

    return new_population

# Test the evolution process within the first subcomponent
evolved_subcomponent = evolve_subcomponent(subcomponents[0], subcomponents[1:], features, targets, mutation_rate)
evolved_subcomponent[:10, :]  # Display the first few individuals in the evolved subcomponent, I changed from 50 to 10
